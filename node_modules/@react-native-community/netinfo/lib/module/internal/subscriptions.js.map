{"version":3,"sources":["subscriptions.ts"],"names":["NativeInterface","DEVICE_CONNECTIVITY_EVENT","_subscriptions","Set","_latestState","_nativeEventSubscription","_listenerHandler","state","forEach","handler","add","latestOnListen","getCurrentState","then","size","eventEmitter","addListener","remove","delete","clear"],"mappings":"AAUA,MAAOA,CAAAA,eAAP,KAA4B,mBAA5B,CAGA,GAAMC,CAAAA,yBAAyB,CAAG,gCAAlC,CAEA,GAAMC,CAAAA,cAAc,CAAG,GAAIC,CAAAA,GAAJ,EAAvB,CACA,GAAIC,CAAAA,YAAuC,CAAG,IAA9C,CAEA,GAAIC,CAAAA,wBAAwD,CAAG,IAA/D,CAEA,QAASC,CAAAA,gBAAT,CAA0BC,KAA1B,CAA2D,CACzDH,YAAY,CAAGG,KAAf,CACAL,cAAc,CAACM,OAAf,CAAuB,SAACC,OAAD,QAAmBA,CAAAA,OAAO,CAACF,KAAD,CAA1B,EAAvB,EACD,CAED,MAAO,SAASG,CAAAA,GAAT,CACLD,OADK,CAGC,IADNE,CAAAA,cACM,2DADoB,IACpB,CAENT,cAAc,CAACQ,GAAf,CAAmBD,OAAnB,EAGA,GAAIE,cAAJ,CAAoB,CAClB,GAAIP,YAAJ,CAAkB,CAChBK,OAAO,CAACL,YAAD,CAAP,CACD,CAFD,IAEO,CACLJ,eAAe,CAACY,eAAhB,GAAkCC,IAAlC,CACE,SAACN,KAAD,CAAiB,CACfH,YAAY,CAAGG,KAAf,CACAE,OAAO,CAACL,YAAD,CAAP,CACD,CAJH,EAMD,CACF,CAGD,GAAIF,cAAc,CAACY,IAAf,CAAsB,CAAtB,EAA2B,CAACT,wBAAhC,CAA0D,CACxDA,wBAAwB,CAAGL,eAAe,CAACe,YAAhB,CAA6BC,WAA7B,CACzBf,yBADyB,CAEzBK,gBAFyB,CAA3B,CAID,CACF,CAED,MAAO,SAASW,CAAAA,MAAT,CAAgBR,OAAhB,CAA2D,CAChEP,cAAc,CAACgB,MAAf,CAAsBT,OAAtB,EAEA,GAAIP,cAAc,CAACY,IAAf,GAAwB,CAAxB,EAA6BT,wBAAjC,CAA2D,CACzDA,wBAAwB,CAACY,MAAzB,GACAZ,wBAAwB,CAAG,IAA3B,CACD,CACF,CAED,MAAO,SAASc,CAAAA,KAAT,EAAuB,CAC5BjB,cAAc,CAACiB,KAAf,GAEA,GAAId,wBAAJ,CAA8B,CAC5BA,wBAAwB,CAACY,MAAzB,GACAZ,wBAAwB,CAAG,IAA3B,CACD,CACF,CAED,cAAe,CACbK,GAAG,CAAHA,GADa,CAEbO,MAAM,CAANA,MAFa,CAGbE,KAAK,CAALA,KAHa,CAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {NativeEventSubscription} from 'react-native';\nimport NativeInterface from './nativeInterface';\nimport * as Types from './types';\n\nconst DEVICE_CONNECTIVITY_EVENT = 'netInfo.networkStatusDidChange';\n\nconst _subscriptions = new Set<Types.NetInfoChangeHandler>();\nlet _latestState: Types.NetInfoState | null = null;\n\nlet _nativeEventSubscription: NativeEventSubscription | null = null;\n\nfunction _listenerHandler(state: Types.NetInfoState): void {\n  _latestState = state;\n  _subscriptions.forEach((handler): void => handler(state));\n}\n\nexport function add(\n  handler: Types.NetInfoChangeHandler,\n  latestOnListen: boolean = true,\n): void {\n  // Add the subscription handler to our set\n  _subscriptions.add(handler);\n\n  // Send it the latest data we have\n  if (latestOnListen) {\n    if (_latestState) {\n      handler(_latestState);\n    } else {\n      NativeInterface.getCurrentState().then(\n        (state): void => {\n          _latestState = state;\n          handler(_latestState);\n        },\n      );\n    }\n  }\n\n  // Subscribe to native events, if we aren't already\n  if (_subscriptions.size > 0 && !_nativeEventSubscription) {\n    _nativeEventSubscription = NativeInterface.eventEmitter.addListener(\n      DEVICE_CONNECTIVITY_EVENT,\n      _listenerHandler,\n    );\n  }\n}\n\nexport function remove(handler: Types.NetInfoChangeHandler): void {\n  _subscriptions.delete(handler);\n\n  if (_subscriptions.size === 0 && _nativeEventSubscription) {\n    _nativeEventSubscription.remove();\n    _nativeEventSubscription = null;\n  }\n}\n\nexport function clear(): void {\n  _subscriptions.clear();\n\n  if (_nativeEventSubscription) {\n    _nativeEventSubscription.remove();\n    _nativeEventSubscription = null;\n  }\n}\n\nexport default {\n  add,\n  remove,\n  clear,\n};\n"]}