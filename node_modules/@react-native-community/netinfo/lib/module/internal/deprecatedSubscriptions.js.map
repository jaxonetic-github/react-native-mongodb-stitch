{"version":3,"sources":["deprecatedSubscriptions.ts"],"names":["Subscriptions","NativeInterface","DeprecatedUtils","_subscriptions","Set","_latestState","_isListening","_listenerHandler","state","convertedState","convertState","forEach","handler","add","getCurrentState","then","size","remove","delete","clear"],"mappings":"AASA,MAAOA,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CAEA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CAGA,GAAMC,CAAAA,cAAc,CAAG,GAAIC,CAAAA,GAAJ,EAAvB,CACA,GAAIC,CAAAA,YAAgD,CAAG,IAAvD,CAEA,GAAIC,CAAAA,YAAY,CAAG,KAAnB,CAEA,QAASC,CAAAA,gBAAT,CAA0BC,KAA1B,CAA2D,CACzD,GAAMC,CAAAA,cAAc,CAAGP,eAAe,CAACQ,YAAhB,CAA6BF,KAA7B,CAAvB,CACAH,YAAY,CAAGI,cAAf,CACAN,cAAc,CAACQ,OAAf,CAAuB,SAACC,OAAD,QAAmBA,CAAAA,OAAO,CAACH,cAAD,CAA1B,EAAvB,EACD,CAED,MAAO,SAASI,CAAAA,GAAT,CAAaD,OAAb,CAA2D,CAEhET,cAAc,CAACU,GAAf,CAAmBD,OAAnB,EAGA,GAAIP,YAAJ,CAAkB,CAChBO,OAAO,CAACP,YAAD,CAAP,CACD,CAFD,IAEO,CACLJ,eAAe,CAACa,eAAhB,GAAkCC,IAAlC,CACE,SAACP,KAAD,CAAiB,CACfH,YAAY,CAAGH,eAAe,CAACQ,YAAhB,CAA6BF,KAA7B,CAAf,CACAI,OAAO,CAACP,YAAD,CAAP,CACD,CAJH,EAMD,CAGD,GAAIF,cAAc,CAACa,IAAf,CAAsB,CAAtB,EAA2B,CAACV,YAAhC,CAA8C,CAC5CN,aAAa,CAACa,GAAd,CAAkBN,gBAAlB,CAAoC,KAApC,EACAD,YAAY,CAAG,IAAf,CACD,CACF,CAED,MAAO,SAASW,CAAAA,MAAT,CAAgBL,OAAhB,CAA8D,CACnET,cAAc,CAACe,MAAf,CAAsBN,OAAtB,EAEA,GAAIT,cAAc,CAACa,IAAf,GAAwB,CAAxB,EAA6BV,YAAjC,CAA+C,CAC7CN,aAAa,CAACiB,MAAd,CAAqBV,gBAArB,EACAD,YAAY,CAAG,KAAf,CACD,CACF,CAED,MAAO,SAASa,CAAAA,KAAT,EAAuB,CAC5BhB,cAAc,CAACgB,KAAf,GAEA,GAAIb,YAAJ,CAAkB,CAChBN,aAAa,CAACiB,MAAd,CAAqBV,gBAArB,EACAD,YAAY,CAAG,KAAf,CACD,CACF,CAED,cAAe,CACbO,GAAG,CAAHA,GADa,CAEbI,MAAM,CAANA,MAFa,CAGbE,KAAK,CAALA,KAHa,CAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport Subscriptions from './subscriptions';\nimport NativeInterface from './nativeInterface';\nimport * as DeprecatedTypes from './deprecatedTypes';\nimport DeprecatedUtils from './deprecatedUtils';\nimport * as Types from './types';\n\nconst _subscriptions = new Set<DeprecatedTypes.ChangeHandler>();\nlet _latestState: DeprecatedTypes.NetInfoData | null = null;\n\nlet _isListening = false;\n\nfunction _listenerHandler(state: Types.NetInfoState): void {\n  const convertedState = DeprecatedUtils.convertState(state);\n  _latestState = convertedState;\n  _subscriptions.forEach((handler): void => handler(convertedState));\n}\n\nexport function add(handler: DeprecatedTypes.ChangeHandler): void {\n  // Add the subscription handler to our set\n  _subscriptions.add(handler);\n\n  // Send it the latest data we have\n  if (_latestState) {\n    handler(_latestState);\n  } else {\n    NativeInterface.getCurrentState().then(\n      (state): void => {\n        _latestState = DeprecatedUtils.convertState(state);\n        handler(_latestState);\n      },\n    );\n  }\n\n  // Subscribe to native events, if we aren't already\n  if (_subscriptions.size > 0 && !_isListening) {\n    Subscriptions.add(_listenerHandler, false);\n    _isListening = true;\n  }\n}\n\nexport function remove(handler: DeprecatedTypes.ChangeHandler): void {\n  _subscriptions.delete(handler);\n\n  if (_subscriptions.size === 0 && _isListening) {\n    Subscriptions.remove(_listenerHandler);\n    _isListening = false;\n  }\n}\n\nexport function clear(): void {\n  _subscriptions.clear();\n\n  if (_isListening) {\n    Subscriptions.remove(_listenerHandler);\n    _isListening = false;\n  }\n}\n\nexport default {\n  add,\n  remove,\n  clear,\n};\n"]}