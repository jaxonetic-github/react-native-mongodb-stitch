{"version":3,"sources":["index.ts"],"names":["useState","useEffect","DeprecatedUtils","DeprecatedSubscriptions","DeprecatedTypes","Subscriptions","Types","NativeInterface","_isConnectedListeners","Map","fetch","getCurrentState","addEventListener","listenerOrType","deprecatedHandler","undefined","warnOnce","CHANGE_EVENT_NAME","add","remove","listener","useNetInfo","type","NetInfoStateType","unknown","isConnected","details","netInfo","setNetInfo","removeEventListener","handler","getConnectionInfo","then","convertState","isConnectionExpensive","eventName","state","set","_eventName","get","delete"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect} from 'react';\nimport DeprecatedUtils from './internal/deprecatedUtils';\nimport DeprecatedSubscriptions from './internal/deprecatedSubscriptions';\nimport * as DeprecatedTypes from './internal/deprecatedTypes';\nimport Subscriptions from './internal/subscriptions';\nimport * as Types from './internal/types';\nimport NativeInterface from './internal/nativeInterface';\n\nconst _isConnectedListeners = new Map<\n  DeprecatedTypes.IsConnectedHandler,\n  /// @ts-ignore Typescript des not like the trailing comma that Prettier insists upon\n  Types.NetInfoChangeHandler\n>();\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(): Promise<Types.NetInfoState> {\n  return NativeInterface.getCurrentState();\n}\n\n/**\n * Subscribe to connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns An ofunction which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription;\n\n/**\n * Deprecated network state listener. You should remove the event name and change your handler to\n * use the new state shape.\n *\n * @deprecated\n *\n * @param type The event type.\n * @param deprecatedHandler The listener.\n *\n * @returns An object with a remove function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  type: string,\n  deprecatedHandler: DeprecatedTypes.ChangeHandler,\n): DeprecatedTypes.Subscription;\n\n// Implementation of the overloaded methods above\nexport function addEventListener(\n  listenerOrType: Types.NetInfoChangeHandler | string,\n  deprecatedHandler: DeprecatedTypes.ChangeHandler | undefined = undefined,\n): Types.NetInfoSubscription | DeprecatedTypes.Subscription {\n  if (typeof listenerOrType === 'string') {\n    DeprecatedUtils.warnOnce();\n\n    if (\n      listenerOrType === DeprecatedTypes.CHANGE_EVENT_NAME &&\n      deprecatedHandler\n    ) {\n      DeprecatedSubscriptions.add(deprecatedHandler);\n      return {\n        remove: (): void => {\n          DeprecatedSubscriptions.remove(deprecatedHandler);\n        },\n      };\n    } else {\n      return {\n        remove: (): void => {},\n      };\n    }\n  } else {\n    const listener = listenerOrType;\n    Subscriptions.add(listener);\n    return (): void => {\n      Subscriptions.remove(listener);\n    };\n  }\n}\n\n/**\n * A React Hook which updates when the connection state changes.\n *\n * @returns The connection state.\n */\nexport function useNetInfo(): Types.NetInfoState {\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: false,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    return addEventListener(setNetInfo);\n  }, []);\n\n  return netInfo;\n}\n\n/**\n * Deprecated method to remove the listener. You should upgrade to the new API.\n *\n * @deprecated\n *\n * @param type The event type.\n * @param handler The event listener.\n */\nexport function removeEventListener(\n  type: string,\n  handler: DeprecatedTypes.ChangeHandler,\n): void {\n  DeprecatedUtils.warnOnce();\n\n  if (type === DeprecatedTypes.CHANGE_EVENT_NAME) {\n    DeprecatedSubscriptions.remove(handler);\n  }\n}\n\n/**\n * Deprecated method to get the current state. You should upgrade to the new `fetch` method and\n * handle the new state type.\n *\n * @deprecated\n */\nexport function getConnectionInfo(): Promise<DeprecatedTypes.NetInfoData> {\n  DeprecatedUtils.warnOnce();\n  return NativeInterface.getCurrentState().then(DeprecatedUtils.convertState);\n}\n\n/**\n * Deprecated method to tell if the current connection is \"expensive\". Only available on Android.\n * You should now call the `fetch` method and look at the `details.isConnectionExpensive` property.\n *\n * @deprecated\n */\nexport function isConnectionExpensive(): Promise<boolean> {\n  DeprecatedUtils.warnOnce();\n  return NativeInterface.getCurrentState().then(\n    DeprecatedUtils.isConnectionExpensive,\n  );\n}\n\nexport const isConnected = {\n  /**\n   * Deprecated method to listen for changes to the connected boolean. You should now use the\n   * normal `addEventListener` method and look at the `isConnected` property.\n   *\n   * @deprecated\n   */\n  addEventListener: (\n    eventName: string,\n    handler: DeprecatedTypes.IsConnectedHandler,\n  ): DeprecatedTypes.Subscription => {\n    if (eventName !== DeprecatedTypes.CHANGE_EVENT_NAME) {\n      return {remove: (): void => {}};\n    }\n\n    const listener = (state: Types.NetInfoState): void => {\n      handler(DeprecatedUtils.isConnected(state));\n    };\n\n    _isConnectedListeners.set(handler, listener);\n    Subscriptions.add(listener);\n\n    return {\n      remove: (): void => {\n        Subscriptions.remove(listener);\n      },\n    };\n  },\n\n  /**\n   * Deprecated method to stop listening for changes to the connected boolean. You should now use\n   * the normal `addEventListener` method and look at the `isConnected` property.\n   *\n   * @deprecated\n   */\n  removeEventListener: (\n    _eventName: string,\n    handler: DeprecatedTypes.IsConnectedHandler,\n  ): void => {\n    const listener = _isConnectedListeners.get(handler);\n    listener && Subscriptions.remove(listener);\n    _isConnectedListeners.delete(handler);\n  },\n\n  /**\n   * Deprecated method to get the current is connected boolean. You should now use the normal\n   * `fetch` method and look at the `isConnected` property.\n   *\n   * @deprecated\n   */\n  fetch: (): Promise<boolean> => {\n    return NativeInterface.getCurrentState().then(DeprecatedUtils.isConnected);\n  },\n};\n\nexport * from './internal/types';\nexport * from './internal/deprecatedTypes';\n\nexport default {\n  fetch,\n  addEventListener,\n  useNetInfo,\n  removeEventListener,\n  getConnectionInfo,\n  isConnectionExpensive,\n  isConnected,\n};\n"]}