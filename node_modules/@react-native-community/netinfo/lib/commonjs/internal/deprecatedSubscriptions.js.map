{"version":3,"sources":["deprecatedSubscriptions.ts"],"names":["_subscriptions","Set","_latestState","_isListening","_listenerHandler","state","convertedState","DeprecatedUtils","convertState","forEach","handler","add","NativeInterface","getCurrentState","then","size","Subscriptions","remove","delete","clear"],"mappings":"6NASA,uEACA,0EAEA,0EAGA,GAAMA,CAAAA,cAAc,CAAG,GAAIC,CAAAA,GAAJ,EAAvB,CACA,GAAIC,CAAAA,YAAgD,CAAG,IAAvD,CAEA,GAAIC,CAAAA,YAAY,CAAG,KAAnB,CAEA,QAASC,CAAAA,gBAAT,CAA0BC,KAA1B,CAA2D,CACzD,GAAMC,CAAAA,cAAc,CAAGC,yBAAgBC,YAAhB,CAA6BH,KAA7B,CAAvB,CACAH,YAAY,CAAGI,cAAf,CACAN,cAAc,CAACS,OAAf,CAAuB,SAACC,OAAD,QAAmBA,CAAAA,OAAO,CAACJ,cAAD,CAA1B,EAAvB,EACD,CAEM,QAASK,CAAAA,GAAT,CAAaD,OAAb,CAA2D,CAEhEV,cAAc,CAACW,GAAf,CAAmBD,OAAnB,EAGA,GAAIR,YAAJ,CAAkB,CAChBQ,OAAO,CAACR,YAAD,CAAP,CACD,CAFD,IAEO,CACLU,yBAAgBC,eAAhB,GAAkCC,IAAlC,CACE,SAACT,KAAD,CAAiB,CACfH,YAAY,CAAGK,yBAAgBC,YAAhB,CAA6BH,KAA7B,CAAf,CACAK,OAAO,CAACR,YAAD,CAAP,CACD,CAJH,EAMD,CAGD,GAAIF,cAAc,CAACe,IAAf,CAAsB,CAAtB,EAA2B,CAACZ,YAAhC,CAA8C,CAC5Ca,wBAAcL,GAAd,CAAkBP,gBAAlB,CAAoC,KAApC,EACAD,YAAY,CAAG,IAAf,CACD,CACF,CAEM,QAASc,CAAAA,MAAT,CAAgBP,OAAhB,CAA8D,CACnEV,cAAc,CAACkB,MAAf,CAAsBR,OAAtB,EAEA,GAAIV,cAAc,CAACe,IAAf,GAAwB,CAAxB,EAA6BZ,YAAjC,CAA+C,CAC7Ca,wBAAcC,MAAd,CAAqBb,gBAArB,EACAD,YAAY,CAAG,KAAf,CACD,CACF,CAEM,QAASgB,CAAAA,KAAT,EAAuB,CAC5BnB,cAAc,CAACmB,KAAf,GAEA,GAAIhB,YAAJ,CAAkB,CAChBa,wBAAcC,MAAd,CAAqBb,gBAArB,EACAD,YAAY,CAAG,KAAf,CACD,CACF,C,aAEc,CACbQ,GAAG,CAAHA,GADa,CAEbM,MAAM,CAANA,MAFa,CAGbE,KAAK,CAALA,KAHa,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport Subscriptions from './subscriptions';\nimport NativeInterface from './nativeInterface';\nimport * as DeprecatedTypes from './deprecatedTypes';\nimport DeprecatedUtils from './deprecatedUtils';\nimport * as Types from './types';\n\nconst _subscriptions = new Set<DeprecatedTypes.ChangeHandler>();\nlet _latestState: DeprecatedTypes.NetInfoData | null = null;\n\nlet _isListening = false;\n\nfunction _listenerHandler(state: Types.NetInfoState): void {\n  const convertedState = DeprecatedUtils.convertState(state);\n  _latestState = convertedState;\n  _subscriptions.forEach((handler): void => handler(convertedState));\n}\n\nexport function add(handler: DeprecatedTypes.ChangeHandler): void {\n  // Add the subscription handler to our set\n  _subscriptions.add(handler);\n\n  // Send it the latest data we have\n  if (_latestState) {\n    handler(_latestState);\n  } else {\n    NativeInterface.getCurrentState().then(\n      (state): void => {\n        _latestState = DeprecatedUtils.convertState(state);\n        handler(_latestState);\n      },\n    );\n  }\n\n  // Subscribe to native events, if we aren't already\n  if (_subscriptions.size > 0 && !_isListening) {\n    Subscriptions.add(_listenerHandler, false);\n    _isListening = true;\n  }\n}\n\nexport function remove(handler: DeprecatedTypes.ChangeHandler): void {\n  _subscriptions.delete(handler);\n\n  if (_subscriptions.size === 0 && _isListening) {\n    Subscriptions.remove(_listenerHandler);\n    _isListening = false;\n  }\n}\n\nexport function clear(): void {\n  _subscriptions.clear();\n\n  if (_isListening) {\n    Subscriptions.remove(_listenerHandler);\n    _isListening = false;\n  }\n}\n\nexport default {\n  add,\n  remove,\n  clear,\n};\n"]}